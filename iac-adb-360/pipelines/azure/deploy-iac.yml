name: Deploy-IAC

trigger:
  branches:
    include:
      - dev
  paths:
    exclude:
      - '*'

pr:
  branches:
    include:
      - dev

variables:
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}: 
    - template: ./configdev.yml
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: 
    - template: ./configprd.yml


pool:
  name: jensazureagentpool
  

stages:
# --- Bootstrap tools on the self-hosted agent VM ---
- stage: UpdateVM
  displayName: Bootstrap tools on agent VM
  jobs:
  - job: UpdateVMJob
    displayName: Update VMSS Job
    steps:
    - task: AzureCLI@2
      displayName: Bootstrap tools on agent VM
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail

          # Ensure bicep is available (try az, then download if needed)
          az bicep install || true
          az bicep version || true

          # Locate bicep binary
          SRC=""
          for CAND in \
            "${AZURE_CONFIG_DIR:-$HOME/.azure}/bin/bicep" \
            "$HOME/.azure/bin/bicep" \
            "$(command -v bicep || true)"
          do
            if [ -n "${CAND}" ] && [ -x "${CAND}" ]; then SRC="${CAND}"; break; fi
          done

          if [ -z "${SRC}" ]; then
            echo "Bicep not found; downloading latest..."
            sudo curl -fsSL -o /usr/local/bin/bicep \
              https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
            sudo chmod +x /usr/local/bin/bicep
          else
            DEST="/usr/local/bin/bicep"
            if [ -x "$DEST" ] && cmp -s "$SRC" "$DEST"; then
              echo "Bicep already installed at $DEST (same binary); skipping copy."
            else
              echo "Installing Bicep globally to $DEST"
              sudo install -m 0755 "$SRC" "$DEST"
            fi
          fi

          /usr/local/bin/bicep --version

          # Base utils
          sudo apt-get update -y
          sudo apt-get install -y unzip ca-certificates curl apt-transport-https lsb-release gnupg

          # Databricks CLI â€” skip if present (avoid exit 1)
          if command -v databricks >/dev/null 2>&1; then
            echo "Databricks CLI present at $(command -v databricks); skipping reinstall."
          else
            curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh
          fi
          databricks --version || true

          # VS Code via snap (best-effort)
          if command -v snap >/dev/null 2>&1; then
            sudo snap install --classic code || true
          fi 

    - task: AzureCLI@2
      displayName: Install & sanity-check Bicep
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euxo pipefail
          az bicep install
          az bicep build --file ./iac-adb-360/main.bicep

# --- Quick syntax check (local build) ---
- stage: checkbicep
  displayName: check bicep
  dependsOn: UpdateVM
  jobs:
  - job: checkbicepjob
    displayName: check bicep syntax
    steps:
    - script: |
        echo "Checking bicep syntax..."
        bicep build ./iac-adb-360/main.bicep
      displayName: checking bicep syntax ...


# --- Validate against Azure (CLI pinned to 2.72.0 via venv) ---
- stage: validatebicep
  displayName: Validate Bicep against Azure
  dependsOn: checkbicep
  jobs:
  - job: ValidateBicepJob
    displayName: Validate Bicep Job
    steps:
    - task: Bash@3
      displayName: Create venv and install Azure CLI 2.72.0
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          # Create an isolated Python environment for az 2.72.0
          python3 -m venv .az272
          . ./.az272/bin/activate
          pip install --upgrade pip
          pip install "azure-cli==2.72.0"
          az version

    - task: AzureCLI@2
      displayName: Validate Bicep (az 2.72.0)
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          . ./.az272/bin/activate
          az deployment group validate \
            --resource-group "$(resourcegroup)" \
            --template-file ./iac-adb-360/main.bicep \
            --parameters baseName="$(baseName)" env="$(env)" \
            --only-show-errors

    # Helpful: if validation fails, print server-side error from Activity Log
    - task: AzureCLI@2
      displayName: Dump RG Activity Log (last 2h, Validate failures)
      condition: failed()
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Fetching recent failed 'Validate' operations from Activity Log..."
          . ./.az272/bin/activate
          az monitor activity-log list \
            --resource-group "$(resourcegroup)" \
            --status Failed \
            --offset 2h \
            --max-events 10 \
            --query "[?contains(operationName.localizedValue, 'Validate')].[eventTimestamp,operationName.localizedValue,properties.statusCode,properties.statusMessage]" \
            -o jsonc || true


- stage: Deploy
  displayName: Deploy Stage
  jobs:
    - deployment: DeployJob
      displayName: Deploy to dev environment
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureCLI@2
                inputs:
                  azureSubscription: 'ado-sc'
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: 'az deployment group create --resource-group $(resourcegroup) --template-file ./iac-adb-360/main.bicep --parameters baseName=$(baseName) env=$(env)'
  
