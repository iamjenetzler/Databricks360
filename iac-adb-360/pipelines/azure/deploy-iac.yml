name: Deploy-IAC

trigger:
  branches:
    include:
      - dev
  paths:
    exclude:
      - '*'

pr:
  branches:
    include:
      - dev

variables:
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}: 
    - template: ./configdev.yml
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: 
    - template: ./configprd.yml


pool:
  name: jensazureagentpool
  

stages:
- stage: UpdateVM
  displayName: Bootstrap tools on agent VM
  jobs:
  - job: UpdateVMJob
    displayName: Update VMSS Job
    steps:
    - task: AzureCLI@2
      displayName: Bootstrap tools on agent VM
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euxo pipefail

          # Azure CLI repo (idempotent)
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          # Install Bicep into this task's AZURE_CONFIG_DIR, then make it global
          az bicep install
          BICEP_SRC="${AZURE_CONFIG_DIR:-$HOME/.azure}/bin/bicep"
          sudo install -m 0755 "$BICEP_SRC" /usr/local/bin/bicep
          /usr/local/bin/bicep --version

          # Base utils
          sudo apt-get update -y
          sudo apt-get install -y unzip ca-certificates curl apt-transport-https lsb-release gnupg

          # Databricks CLI â€” skip if present (avoid exit 1)
          if command -v databricks >/dev/null 2>&1; then
            echo "Databricks CLI present at $(command -v databricks); skipping reinstall."
          else
            curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh
          fi
          databricks --version || true

          # VS Code via snap (best-effort)
          if command -v snap >/dev/null 2>&1; then
            sudo snap install --classic code || true
          fi
    - task: AzureCLI@2
      displayName: Install Bicep
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euxo pipefail
          az bicep install
          az bicep build --file ./iac-adb-360/main.bicep



# --- Azure ops (use your service connection) ---
- stage: AzureCLI2
  displayName: Ensure RG + enable per-instance Public IPs on VMSS
  jobs:
  - job: AzureCLIJob
    displayName: Azure CLI Job
    steps:
    - task: AzureCLI@2
      inputs:  
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # Add a public IP configuration to the NIC
          az vmss update \
            -g 'vmssagents' -n 'vmssagentspool' \
            --set virtualMachineProfile.networkProfile.networkInterfaceConfigurations[0].ipConfigurations[0].publicIPAddressConfiguration='{"name":"pubip","idleTimeoutInMinutes":10}'

          # Apply change to existing instances
          az vmss update-instances -g 'vmssagentspool' -n 'vmssagentspool' --instance-ids "*"

          # List connection info (public IPs, ports, etc.)
          az vmss list-instance-connection-info -g 'vmssagentspool' -n 'vmssagentspool' -o table

- stage: checkbicep
  displayName: check bicep
  jobs:
    - job: checkbicepjob
      displayName: check bicep syntax
      steps:
        - script: |
            echo "Checking bicep syntax..."
            bicep build ./iac-adb-360/main.bicep
          displayName: checking bicep syntax ...

- stage: validatebicep
  displayName: Validate Bicep against Azure
  jobs:
    - job: ValidateBicepJob
      displayName: Validate Bicep Job
      steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'ado-sc'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az deployment group validate --resource-group $(resourcegroup) --template-file ./iac-adb-360/main.bicep --parameters baseName=$(baseName) env=$(env)'


- stage: Deploy
  displayName: Deploy Stage
  jobs:
    - deployment: DeployJob
      displayName: Deploy to dev environment
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureCLI@2
                inputs:
                  azureSubscription: 'ado-sc'
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: 'az deployment group create --resource-group $(resourcegroup) --template-file ./iac-adb-360/main.bicep --parameters baseName=$(baseName) env=$(env)'
  
