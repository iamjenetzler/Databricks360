name: Deploy-IAC

trigger:
  branches:
    include:
      - dev
  paths:
    exclude:
      - '*'

pr:
  branches:
    include:
      - dev

variables:
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}: 
    - template: ./configdev.yml
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: 
    - template: ./configprd.yml


pool:
  name: jensazureagentpool
  

stages:
# - stage: UpdateVM
#   displayName: Bootstrap tools on agent VM
#   jobs:
#   - job: UpdateVMJob
#     displayName: Update VMSS Job
#     steps:
#     - task: AzureCLI@2
#       displayName: Bootstrap tools on agent VM
#       inputs:
#         azureSubscription: 'ado-sc'
#         scriptType: bash
#         scriptLocation: inlineScript
#         inlineScript: |
#           set -euo pipefail

#           # Ensure bicep is available (try az, then download if needed)
#           az bicep install || true
#           az bicep version || true

#           # Locate bicep
#           SRC=""
#           for CAND in \
#             "${AZURE_CONFIG_DIR:-$HOME/.azure}/bin/bicep" \
#             "$HOME/.azure/bin/bicep" \
#             "$(command -v bicep || true)"
#           do
#             if [ -n "${CAND}" ] && [ -x "${CAND}" ]; then SRC="${CAND}"; break; fi
#           done

#           if [ -z "${SRC}" ]; then
#             echo "Bicep not found; downloading latest..."
#             sudo curl -fsSL -o /usr/local/bin/bicep \
#               https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
#             sudo chmod +x /usr/local/bin/bicep
#           else
#             DEST="/usr/local/bin/bicep"
#             # Only copy if dest missing or different content
#             if [ -x "$DEST" ] && cmp -s "$SRC" "$DEST"; then
#               echo "Bicep already installed at $DEST (same binary); skipping copy."
#             else
#               echo "Installing Bicep globally to $DEST"
#               sudo install -m 0755 "$SRC" "$DEST"
#             fi
#           fi

#           /usr/local/bin/bicep --version

#           # Base utils
#           sudo apt-get update -y
#           sudo apt-get install -y unzip ca-certificates curl apt-transport-https lsb-release gnupg

#           # Databricks CLI — skip if present (avoid exit 1)
#           if command -v databricks >/dev/null 2>&1; then
#             echo "Databricks CLI present at $(command -v databricks); skipping reinstall."
#           else
#             curl -fsSL https://raw.githubusercontent.com/databricks/setup-cli/main/install.sh | sudo sh
#           fi
#           databricks --version || true

#           # VS Code via snap (best-effort)
#           if command -v snap >/dev/null 2>&1; then
#             sudo snap install --classic code || true
#           fi 
#     - task: AzureCLI@2
#       displayName: Install Bicep
#       inputs:
#         azureSubscription: 'ado-sc'
#         scriptType: bash
#         scriptLocation: inlineScript
#         inlineScript: |
#           set -euxo pipefail
#           az bicep install
#           az bicep build --file ./iac-adb-360/main.bicep



# --- Azure ops (use your service connection) ---
# - stage: AzureCLI2
#   displayName: Ensure RG + enable per-instance Public IPs on VMSS
#   jobs:
#   - job: AzureCLIJob
#     displayName: Azure CLI Job
#     steps:
#     - task: AzureCLI@2
#       inputs:  
#         azureSubscription: 'ado-sc'
#         scriptType: bash
#         scriptLocation: inlineScript
#         inlineScript: |
#           # Add a public IP configuration to the NIC
#           az vmss update \
#             -g 'vmssagents' -n 'vmssagentspool' \
#             --set virtualMachineProfile.networkProfile.networkInterfaceConfigurations[0].ipConfigurations[0].publicIPAddressConfiguration='{"name":"pubip","idleTimeoutInMinutes":10}' \
#             -o none --only-show-errors

#           # Apply change to existing instances
#           az vmss update-instances -g 'vmssagents' -n 'vmssagentspool' --instance-ids "*" \
#             -o none --only-show-errors

#           #  Show per-instance public IP
#           az vmss list-instance-public-ips \
#             -g 'vmssagents' -n 'vmssagentspool' \
#             --query "[].{id:instanceId,ip:ipAddress,name:name}" -o table



# - stage: checkbicep
#   displayName: check bicep
#   jobs:
#     - job: checkbicepjob
#       displayName: check bicep syntax
#       steps:
#         - script: |
#             echo "Checking bicep syntax..."
#             bicep build ./iac-adb-360/main.bicep
#           displayName: checking bicep syntax ...

# - stage: validatebicep
#   displayName: Validate Bicep against Azure
#   jobs:
#     - job: ValidateBicepJob
#       displayName: Validate Bicep Job
#       steps:
#       - task: AzureCLI@2
#         inputs:
#           azureSubscription: 'ado-sc'
#           scriptType: 'bash'
#           scriptLocation: 'inlineScript'
#           inlineScript: 'az deployment group validate --resource-group $(resourcegroup) --template-file ./iac-adb-360/main.bicep --parameters baseName=$(baseName) env=$(env)'

- stage: validatebicep
  displayName: Validate Bicep against Azure
  # dependsOn: checkbicep
  jobs:
  - job: ValidateBicepJob
    displayName: Validate Bicep Job
    steps:
    - task: AzureCLI@2
      displayName: Upgrade Azure CLI (2.78+)
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          # use the MS repo (already present on most agents)
          sudo apt-get update -y
          sudo apt-get install -y azure-cli
          az version
    # 1) Build Bicep -> JSON
    - task: AzureCLI@2
      displayName: Build Bicep to JSON
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          OUTDIR="$(Pipeline.Workspace)/bicep_out"
          mkdir -p "$OUTDIR"
          az bicep install
          az bicep build --file ./iac-adb-360/main.bicep --outdir "$OUTDIR"
          ls -l "$OUTDIR"

    - task: AzureCLI@2
      displayName: Validate ARM template (quiet)
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          OUTDIR="$(Pipeline.Workspace)/bicep_out"
          TEMPLATE="$OUTDIR/main.json"
          az deployment group validate \
            --resource-group "$(resourcegroup)" \
            --template-file "$TEMPLATE" \
            --parameters baseName="$(baseName)" env="$(env)" \
            -o none --only-show-errors
          echo "✅ Validation succeeded."




- stage: Deploy
  displayName: Deploy Stage
  jobs:
    - deployment: DeployJob
      displayName: Deploy to dev environment
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self
              - task: AzureCLI@2
                inputs:
                  azureSubscription: 'ado-sc'
                  scriptType: 'bash'
                  scriptLocation: 'inlineScript'
                  inlineScript: 'az deployment group create --resource-group $(resourcegroup) --template-file ./iac-adb-360/main.bicep --parameters baseName=$(baseName) env=$(env)'
  
