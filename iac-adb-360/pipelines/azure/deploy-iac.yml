name: Deploy-IAC

trigger:
  branches:
    include:
      - dev
  paths:
    exclude:
      - '*'

pr:
  branches:
    include:
      - dev

variables:
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/dev') }}: 
    - template: ./configdev.yml
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: 
    - template: ./configprd.yml


pool:
  name: jensazureagentpool
  

stages:
# --- Bootstrap tools on the self-hosted agent VM ---
- stage: UpdateVM
  displayName: Bootstrap tools on agent VM
  jobs:
  - job: UpdateVMJob
    displayName: Update VMSS Job
    pool:
      name: jensazureagentpool   # <-- your pool
    steps:
    # 1) Ensure Azure CLI exists *before* AzureCLI@2 logs in
    - task: Bash@3
      displayName: Install Azure CLI (if missing)
      inputs:
        targetType: 'inline'
        script: |
          set -euo pipefail
          if command -v az >/dev/null 2>&1; then
            echo "Azure CLI already present: $(command -v az)"
            az version
            exit 0
          fi

          # Ubuntu/Debian: official one-liner
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          # Verify
          az version

    # 2) Now AzureCLI@2 can authenticate and run your bootstrap
    - task: AzureCLI@2
      displayName: Bootstrap tools on agent VM
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail

          # Ensure bicep is available (via az if possible)
          az bicep install || true
          az bicep version || true

          # Locate bicep binary
          SRC=""
          for CAND in \
            "${AZURE_CONFIG_DIR:-$HOME/.azure}/bin/bicep" \
            "$HOME/.azure/bin/bicep" \
            "$(command -v bicep || true)"; do
            if [ -n "${CAND}" ] && [ -x "${CAND}" ]; then SRC="${CAND}"; break; fi
          done

          if [ -z "${SRC}" ]; then
            echo "Bicep not found; downloading latest..."
            sudo curl -fsSL -o /usr/local/bin/bicep \
              https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
            sudo chmod +x /usr/local/bin/bicep          
          else
            echo "Bicep already available at: ${SRC}"
          fi


    - task: AzureCLI@2
      displayName: Install & sanity-check Bicep
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euxo pipefail
          az bicep install
          az bicep build --file ./iac-adb-360/main.bicep

# --- Quick syntax check (local build) ---
- stage: checkbicep
  displayName: check bicep
  dependsOn: UpdateVM
  jobs:
  - job: checkbicepjob
    displayName: check bicep syntax
    steps:
    - script: |
        echo "Checking bicep syntax..."
        az bicep build --file ./iac-adb-360/main.bicep
      displayName: checking bicep syntax ...


## --- Validate against Azure (latest CLI) ---
- stage: validatebicep
  displayName: Validate Bicep against Azure
  dependsOn: checkbicep
  jobs:
  - job: ValidateBicepJob
    displayName: Validate Bicep Job
    steps:
    - task: Bash@3
      displayName: Ensure Python venv tooling is present
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y python3-venv python3-pip build-essential libffi-dev libssl-dev
          fi

    - task: Bash@3
      displayName: Install PowerShell Core (pwsh)
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          echo "Installing PowerShell Core..."
          wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
          pwsh --version

    - task: Bash@3
      displayName: Install bicep globally for pwsh
      inputs:
        targetType: inline
        script: |
          set -euo pipefail
          echo "Installing bicep..."
          curl -fsSL https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64 -o bicep
          chmod +x bicep
          sudo mv bicep /usr/local/bin/bicep
          which bicep && bicep --version


    - task: PowerShell@2
      displayName: Validate Bicep via PowerShell
      inputs:
        targetType: inline
        script: |
          Install-Module Az.Resources -Force -Scope CurrentUser
          Connect-AzAccount -Identity
          Test-AzResourceGroupDeployment `
            -ResourceGroupName "$(resourcegroup)" `
            -TemplateFile "./iac-adb-360/main.bicep" `
            -TemplateParameterObject @{ baseName = "$(baseName)"; env = "$(env)" } `
            -Verbose




    - task: AzureCLI@2
      displayName: Dump RG Activity Log (last 2h, Validate failures)
      condition: failed()
      inputs:
        azureSubscription: 'ado-sc'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Running What-If validation..."
          echo "Fetching recent failed 'Validate' operations from Activity Log..."
          az monitor activity-log list \
            --resource-group "$(resourcegroup)" \
            --status Failed \
            --offset 2h \
            --max-events 10 \
            --query "[?contains(operationName.localizedValue, 'Validate')].[eventTimestamp,operationName.localizedValue,properties.statusCode,properties.statusMessage]" \
            -o jsonc || true



- stage: Deploy
  displayName: Deploy Stage
  jobs:
    - deployment: DeployJob
      displayName: Deploy to dev environment
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: self

              # 1) Compile Bicep to JSON first
              - task: AzureCLI@2
                displayName: Compile Bicep to JSON
                inputs:
                  azureSubscription: 'ado-sc'
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    set -euo pipefail
                    az bicep install
                    # Compile with compatible flags
                    if az bicep build --help | grep -q -- "--outfile"; then
                      az bicep build --file ./iac-adb-360/main.bicep --outfile ./iac-adb-360/main.json
                    else
                      az bicep build --file ./iac-adb-360/main.bicep --stdout > ./iac-adb-360/main.json
                    fi

              - task: AzureCLI@2
                displayName: RBAC preflight (who am I & do I have rights?)
                inputs:
                  azureSubscription: 'ado-sc'
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    set -euo pipefail

                    # resolve subscription id from current az context
                    SUB_ID="$(az account show --query id -o tsv)"
                    RG="$(resourcegroup)"
                    SCOPE="/subscriptions/${SUB_ID}/resourceGroups/${RG}"

                    echo "Scope: $SCOPE"
                    echo "== az account show =="
                    az account show -o jsonc

                    # For service principals, user.name is the AppId (clientId)
                    APP_ID="$(az account show --query user.name -o tsv)"
                    TYPE="$(az account show --query user.type -o tsv)"
                    echo "Type: $TYPE"
                    echo "AppId/UPN: $APP_ID"

                    # Resolve to Service Principal ObjectId (Enterprise App)
                    OID="$(az ad sp show --id "$APP_ID" --query id -o tsv 2>/dev/null || true)"
                    if [ -z "${OID:-}" ]; then
                    # Managed Identity fal



              # 2) Deploy with AzurePowerShell@5 (auto-auth with ado-sc)
              - task: AzurePowerShell@5
                displayName: Deploy via AzurePowerShell
                inputs:
                  azureSubscription: 'ado-sc'
                  ScriptType: 'InlineScript'
                  Inline: |
                    Install-Module Az.Resources -Force -Scope CurrentUser
                    New-AzResourceGroupDeployment `
                      -ResourceGroupName "$(resourcegroup)" `
                      -TemplateFile "./iac-adb-360/main.json" `
                      -TemplateParameterObject @{ baseName = "$(baseName)"; env = "$(env)" } `
                      -Mode Incremental -Verbose
                  azurePowerShellVersion: 'LatestVersion'
